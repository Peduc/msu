function U = ERKs(t, s, n, w, r)
    % n — номер строчки в Ричердсоне

    J = length(t);

    % Массивы координат и скоростей в данный и последующий моменты времени:
    u1 = w;
    u2 = zeros([length(w), 1]);

    % Оптимальные коэффициенты для метода:
    if s == 1
        
        b(1) = 1;
    
    elseif s == 2
        
        b(1) = 1/4;
        b(2) = 3/4;
        a(2, 1) = 2/3;
   
    elseif s == 3
        
        b(1) = 2/9;
        b(2) = 1/3;
        b(3) = 4/9;
        a(2, 1) = 1/2;
        a(3, 2) = 3/4;
        a(3, 1) = 0;
   
    elseif s == 4
        
        b(1) = 1/6;
        b(2) = 1/3;
        b(3) = 1/3;
        b(4) = 1/6;
        a(2, 1) = 1/2;
        a(3, 1) = 0;
        a(3, 2) = 1/2;
        a(4, 1) = 0;
        a(4, 2) = 0;
        a(4, 3) = 1;
        
    end

    % Счетчик:
    g = 2;

    % Расчет:
    U(:, 1) = u1;

    for i = 2 : J

        tau = t(i) - t(i-1);

        if s == 1
            
            w1 = F2(u1);
            u2 = u1 + tau * b(1) * w1;
            
        elseif s == 2
            
            w1 = F2(u1);
            w2 = F2(u1 + tau * a(2, 1) * w1);
            u2 = u1 + tau * (b(1) * w1 + b(2) * w2);
      
        elseif s == 3
            
            w1 = F2(u1);
            w2 = F2(u1 + tau * a(2, 1) * w1);
            w3 = F2(u1 + tau * (a(3, 1) * w1 + a(3, 2) * w2));
            u2 = u1 + tau * (b(1) * w1 + b(2) * w2 + b(3) * w3);
            
        elseif s == 4
            
            w1 = F2(u1);
            w2 = F2(u1 + tau * a(2, 1) * w1);
            w3 = F2(u1 + tau * (a(3, 1) * w1 + a(3, 2) * w2));
            w4 = F2(u1 + tau * (a(4, 1) * w1 + a(4, 2) * w2 + a(4, 3) * w3));
            u2 = u1 + tau * (b(1) * w1 + b(2) * w2 + b(3) * w3 + b(4) * w4);
            
        end

        % Проверка, что текущая итерация соответствует моменту времени на
        % изначальной сетке:
        if n > 1
            if i == (r^(n-1)) * (g - 1) + 1
                U(:, g) = u2;
                g = g + 1;
            end
        else
            U(:, i) = u2;
        end

        u1 = u2;

    end

end

